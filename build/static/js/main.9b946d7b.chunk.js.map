{"version":3,"sources":["images/mobile.png","Form.js","Waves.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","react_default","a","createElement","className","action","required","id","type","placeholder","title","pattern","data-sitekey","Waves","App","src","Mobile","alt","src_Waves","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+KCuBzBC,MApBf,WACE,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaC,OAAO,GAAIC,UAAQ,GAC9CL,EAAAC,EAAAC,cAAA,wBACEF,EAAAC,EAAAC,cAAA,SAAOI,GAAG,YAAYC,KAAK,OAAOF,UAAQ,IAC5CL,EAAAC,EAAAC,cAAA,0BACEF,EAAAC,EAAAC,cAAA,SAAOI,GAAG,WAAWC,KAAK,OAAOF,UAAQ,IAC3CL,EAAAC,EAAAC,cAAA,uBACEF,EAAAC,EAAAC,cAAA,SAAOI,GAAG,QAAQC,KAAK,QAAQC,YAAY,yBAAyBH,UAAQ,IAC9EL,EAAAC,EAAAC,cAAA,yBACEF,EAAAC,EAAAC,cAAA,SAAOI,GAAG,MAAMC,KAAK,MAAME,MAAM,oCAAiCC,QAAQ,cAC5EV,EAAAC,EAAAC,cAAA,YAAUI,GAAG,UAAUC,KAAK,OAAOC,YAAY,wBAAwBH,UAAQ,IAC/EL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcQ,eAAa,6CAC1CX,EAAAC,EAAAC,cAAA,2BCJOU,MAVf,WACE,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCCURU,EAZH,WACV,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKY,IAAKC,IAAQZ,UAAU,SAASa,IAAI,UAE3ChB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b946d7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mobile.d4711be1.png\";","import React from 'react';\r\nimport './App.scss';\r\n\r\nfunction Form() {\r\n  return (\r\n    <section className=\"Form\" >\r\n      <form className=\"formulario\" action=\"\"  required>\r\n        <label >Nombres</label>\r\n          <input id=\"firstName\" type=\"text\" required/>\r\n        <label>Apellidos</label>\r\n          <input id=\"lastName\" type=\"text\" required/>\r\n        <label>Correo</label>\r\n          <input id=\"email\" type=\"email\" placeholder=\"ejemplo@celumobile.com\" required />\r\n        <label>Telefono</label>\r\n          <input id=\"tel\" type=\"tel\" title=\"Por favor solo digitar nÃºmeros\" pattern=\"[0-9]{10}\"/>\r\n        <textarea id=\"comment\" type=\"text\" placeholder=\"Escribe tu mensaje :)\" required/>\r\n        <div className=\"g-recaptcha\" data-sitekey=\"6LeVsrAUAAAAAHxWonFwVh4iLiq-tyCjzSqz-tAG\"></div>\r\n        <button >Enviar</button>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './App.scss';\r\n\r\nfunction Waves() {\r\n  return (\r\n      <div className=\"waves\">\r\n        <div className=\"wave circulo a\"></div>\r\n        <div className=\"wave circulo b\"></div>\r\n        <div className=\"wave circulo c\"></div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Waves;\r\n","import React from 'react';\nimport Form from './Form'\nimport Waves from './Waves'\nimport  Mobile from './images/mobile.png';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className=\"Container\">\n      <div className=\"Container-image\">\n        <img src={Mobile} className=\"Mobile\" alt=\"logo\" />\n      </div>\n      <Waves/>\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}